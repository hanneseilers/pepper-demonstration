<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="BackBumperPressed" type="0" type_size="1" nature="4" stm_value_name="BackBumperPressed" inner="1" tooltip="BackBumperPressed desc" id="4" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="High Five" id="6" localization="8" tooltip="" x="386" y="63"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram scale="70.7107"><Box name="Fist prepare" id="1" localization="8" tooltip="" x="97" y="113"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="15"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram /></BehaviorKeyframe></BehaviorLayer><ActuatorList model="juliette"><ActuatorCurve name="" actuator="HeadPitch" mute="1" unit="0" /><ActuatorCurve name="value" actuator="HeadYaw" mute="1" unit="0" /><ActuatorCurve name="value" actuator="HipPitch" mute="1" unit="0" /><ActuatorCurve name="value" actuator="HipRoll" mute="1" unit="0" /><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="5" value="-46.8457" /><Key frame="15" value="-28.8281" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="5" value="0.175782" /><Key frame="15" value="-8.70117" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="5" value="0.488576" /><Key frame="15" value="0.616872" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="5" value="69.9609" /><Key frame="15" value="-70.4004" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="5" value="59.0625" /><Key frame="15" value="38.2324" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="5" value="-56.6047" /><Key frame="15" value="0.524941" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="1" unit="0" /><ActuatorCurve name="value" actuator="RElbowYaw" mute="1" unit="0" /><ActuatorCurve name="value" actuator="RHand" mute="1" unit="1" /><ActuatorCurve name="value" actuator="RShoulderPitch" mute="1" unit="0" /><ActuatorCurve name="value" actuator="RShoulderRoll" mute="1" unit="0" /><ActuatorCurve name="value" actuator="RWristYaw" mute="1" unit="0" /></ActuatorList></Timeline></Box><Box name="GetAngleChange" id="2" localization="8" tooltip="" x="580" y="73"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        self.motion = ALProxy("ALMotion")
        self.__jointAngle = 0

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.__jointAngle = self.motion.getAngles( [self.getParameter("Joint")], True )[0]
        if self.__jointAngle == 0.0:
            self.__jointAngle = 0.1
        self.logger.info( "Initial angle: " + str(self.__jointAngle)  )

    def onInput_onMeasure(self):
        angle = self.motion.getAngles( [self.getParameter("Joint")], True )[0]

        try:
            if angle != 0.0:
                angle = 1.0-( angle/self.__jointAngle )
            else:
                angle = self.__jointAngle
        except:
            pass

        if angle < 0:
            angle * -1

        self.logger.debug( "Angle change: " + str(angle) )
        self.onChange( angle )

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onMeasure" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="4" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" /><Output name="onChange" type="2" type_size="1" nature="2" inner="0" tooltip="" id="6" /><Parameter name="Joint" inherits_from_parent="0" content_type="3" value="KneePitch" default_value="KneePitch" custom_choice="0" tooltip="" id="7"><Choice value="KneePitch" /></Parameter></Box><Box name="If" id="3" localization="8" tooltip="Test a condition and stimulate the then or else outputs depending on the boolean&#x0A;value of the condition.&#x0A;The condition can be set in parameters." x="758" y="80"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onData(self, p):
        param = self.getParameter("Value to compare")
        try:
            p = float(p)
            param = float(param)
        except:
            p = str(p)
            param = str(param)
        operator = self.getParameter("Condition operator")
        if( operator == "<" ):
            self.outputTrueOrFalse( p < param )
        elif( operator == "< or =" ):
            self.outputTrueOrFalse( p <= param )
        elif( operator == "=" ):
            self.outputTrueOrFalse( p == param )
        elif( operator == "> or =" ):
            self.outputTrueOrFalse( p >= param )
        elif( operator == ">" ):
            self.outputTrueOrFalse( p > param )
        elif( operator == "≠" ):
            self.outputTrueOrFalse( p != param )
        else:
            raise Exception( "Operator not known: " + str(operator) )

    def outputTrueOrFalse(self, condition):
        if( condition ):
            self.output_then()
        else:
            self.output_else()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onData" type="0" type_size="1" nature="1" inner="0" tooltip="The data to test." id="2" /><Output name="output_then" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent if the condition is true." id="3" /><Output name="output_else" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent if the condition is false." id="4" /><Parameter name="Condition operator" inherits_from_parent="0" content_type="3" value="&gt; or =" default_value="≠" custom_choice="0" tooltip='Choose the condition operator.&#x0A;&#x0A;For example:&#x0A;If you choose &quot;&gt; or =&quot;, the condition will be: is the input is higher or equal&#x0A;than the parameter?' id="5"><Choice value="&lt;" /><Choice value="&lt; or =" /><Choice value="=" /><Choice value="&gt; or =" /><Choice value="&gt;" /><Choice value="≠" /></Parameter><Parameter name="Value to compare" inherits_from_parent="0" content_type="3" value="1.0" default_value="0" custom_choice="0" tooltip="This is the value which is compared to the input value." id="6" /></Box><Box name="Timer" id="5" localization="8" tooltip="Stimulate output repeatedly with the specified interval.&#x0A;Can be stopped anytime. &#x0A;Stimulating the input again restarts the timer.&#x0A;" x="485" y="229"><bitmap>media/images/box/wait.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.timer = None

    def onUnload(self):
        self.cancelTimer()

    def cancelTimer(self):
        if self.timer:
            self.timer.stop()
        self.timer = None

    def onTimer(self):
        self.timerOutput()

    def startTimer(self):
        import qi
        self.timer = qi.PeriodicTask()
        self.timer.setCallback(self.onTimer)
        self.timer.setUsPeriod(int(self.getParameter("Period (s)") * 1000 * 1000))
        self.timer.start(True)

    def onInput_onStart(self):
        self.cancelTimer()
        self.startTimer()

    def onInput_onStop(self):
        if self.timer and self.timer.isRunning():
            self.onStopped()
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the box is stopped." id="4" /><Output name="timerOutput" type="1" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="5" /><Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="0.5" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds).&#x0A;&#x0A;For example, if this parameter is equal to 1s, the timerOutput will be stimulated&#x0A;every second until the onStop input is stimulated." id="6" /></Box><Box name="Delay" id="14" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="274" y="103"><bitmap>media/images/box/wait.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" /><Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" /><Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="2" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" /><Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" /></Box><Box name="Wait For Signals" id="7" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="947" y="236"><bitmap>media/images/box/wait.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" /><Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" /><Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" /></Box><Box name="Hands down" id="4" localization="8" tooltip="" x="811" y="215"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="30"><ActuatorList model="juliette"><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="9" value="-64.5996" /><Key frame="20" value="-64.5996" /><Key frame="30" value="-58.1836" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="9" value="-6.67969" /><Key frame="20" value="-6.67969" /><Key frame="30" value="-10.8984" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="9" value="0.424429" /><Key frame="20" value="0.424429" /><Key frame="30" value="0.420914" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="9" value="55.0195" /><Key frame="20" value="55.0195" /><Key frame="30" value="73.5645" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="9" value="73.2129" /><Key frame="20" value="73.2129" /><Key frame="30" value="28.7402" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="9" value="-8.96736" /><Key frame="20" value="-8.96736" /><Key frame="30" value="-19.5144" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="9" value="17.666" /><Key frame="20" value="17.666" /><Key frame="30" value="17.666" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="9" value="45.6152" /><Key frame="20" value="45.6152" /><Key frame="30" value="45.6152" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="9" value="0.513181" /><Key frame="20" value="0.513181" /><Key frame="30" value="0.513181" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="9" value="69.7851" /><Key frame="20" value="69.7851" /><Key frame="30" value="69.7851" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="9" value="-5.44922" /><Key frame="20" value="-5.44922" /><Key frame="30" value="-5.44922" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="9" value="-5.27591" /><Key frame="20" value="-5.27591" /><Key frame="30" value="-6.5064" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="Say Global" id="6" localization="8" tooltip="Say the text received on its input." x="804" y="348"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote
        self.mem = ALProxy('ALMemory')

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

        try:
            self.mem.getData( 'sys/speech/shape' )
        except:
            self.mem.declareEvent( 'sys/speech/shape' )
            self.mem.insertData( 'sys/speech/shape', 100 )

        try:
            self.mem.getData( 'sys/speech/speed' )
        except:
            self.mem.declareEvent( 'sys/speech/speed' )
            self.mem.insertData( 'sys/speech/speed', 100 )

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        p = str( self.getParameter("Text") )
        self.bIsRunning = True
        try:
            shape = self.mem.getData( 'sys/speech/shape' )
            speed = self.mem.getData( 'sys/speech/speed' )
            sentence = "\RSPD="+ str( speed if speed else 100 ) + "\ "
            sentence += "\VCT="+ str( shape if shape else 100 ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Text" inherits_from_parent="0" content_type="5" value="End" default_value="" tooltip="" id="5" /></Box><Link inputowner="2" indexofinput="3" outputowner="5" indexofoutput="5" /><Link inputowner="2" indexofinput="4" outputowner="3" indexofoutput="3" /><Link inputowner="5" indexofinput="3" outputowner="3" indexofoutput="3" /><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="14" indexofinput="2" outputowner="1" indexofoutput="4" /><Link inputowner="0" indexofinput="4" outputowner="7" indexofoutput="4" /><Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="6" /><Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="3" /><Link inputowner="7" indexofinput="2" outputowner="4" indexofoutput="4" /><Link inputowner="2" indexofinput="2" outputowner="14" indexofoutput="4" /><Link inputowner="5" indexofinput="2" outputowner="14" indexofoutput="4" /><Link inputowner="6" indexofinput="2" outputowner="3" indexofoutput="3" /><Link inputowner="7" indexofinput="3" outputowner="6" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="Disable Autonomous Ability" id="1" localization="8" tooltip="" x="138" y="205"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.life = ALProxy("ALAutonomousLife")
        self.blinking = False
        self.movement = False
        self.awareness = False
        self.listening = False
        self.speaking = False

    def onUnload(self):
        self.life.setAutonomousAbilityEnabled('AutonomousBlinking', self.blinking)
        self.life.setAutonomousAbilityEnabled('BackgroundMovement', self.movement)
        self.life.setAutonomousAbilityEnabled('BasicAwareness', self.awareness)
        self.life.setAutonomousAbilityEnabled('ListeningMovement', self.listining)
        self.life.setAutonomousAbilityEnabled('SpeakingMovement', self.speaking)

    def onInput_onStart(self):
        self.blinking = self.life.getAutonomousAbilityEnabled('AutonomousBlinking')
        self.movement = self.life.getAutonomousAbilityEnabled('BackgroundMovement')
        self.awareness = self.life.getAutonomousAbilityEnabled('BasicAwareness')
        self.listining = self.life.getAutonomousAbilityEnabled('ListeningMovement')
        self.speaking = self.life.getAutonomousAbilityEnabled('SpeakingMovement')

        self.life.setAutonomousAbilityEnabled('All', False)

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Say Global" id="2" localization="8" tooltip="Say the text received on its input." x="166" y="101"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote
        self.mem = ALProxy('ALMemory')

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

        try:
            self.mem.getData( 'sys/speech/shape' )
        except:
            self.mem.declareEvent( 'sys/speech/shape' )
            self.mem.insertData( 'sys/speech/shape', 100 )

        try:
            self.mem.getData( 'sys/speech/speed' )
        except:
            self.mem.declareEvent( 'sys/speech/speed' )
            self.mem.insertData( 'sys/speech/speed', 100 )

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        p = str( self.getParameter("Text") )
        self.bIsRunning = True
        try:
            shape = self.mem.getData( 'sys/speech/shape' )
            speed = self.mem.getData( 'sys/speech/speed' )
            sentence = "\RSPD="+ str( speed if speed else 100 ) + "\ "
            sentence += "\VCT="+ str( shape if shape else 100 ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Text" inherits_from_parent="0" content_type="5" value="Hi! Gib mir Fünf!" default_value="" tooltip="" id="5" /></Box><Box name="Start Demo Main" id="18" localization="0" tooltip="Starts the behavior of the name given as input." x="682" y="47"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_startBehavior(self):
        life = ALProxy("ALAutonomousLife")
        state = life.getState()

        if "disabled" in state:
            bm = ALProxy("ALBehaviorManager")
            bm.startBehavior(self.getParameter("behaviorId"))
            self.onBehaviorStarted(self.getParameter("behaviorId")) #~ activate output of the box
        else:
            self.onBehaviorStarted(None)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="startBehavior" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onBehaviorStarted" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. Recalls the behavior name." id="3" /><Parameter name="behaviorId" inherits_from_parent="1" content_type="3" value="demo-main/behavior_1" default_value="" custom_choice="0" tooltip="" id="4" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="18" indexofinput="2" outputowner="6" indexofoutput="4" /><Link inputowner="0" indexofinput="5" outputowner="18" indexofoutput="3" /><Link inputowner="18" indexofinput="2" outputowner="0" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>